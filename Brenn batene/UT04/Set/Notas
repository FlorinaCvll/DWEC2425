colección de valores únicos. Los elementos en un Set no pueden repetirse, lo que lo hace ideal para almacenar datos sin duplicados


// Casos de uso
1. Eliminar duplicados de un array
    let arrayConDuplicados = [1, 2, 2, 3, 4, 4, 5];
    let setSinDuplicados = new Set(arrayConDuplicados);
    let arraySinDuplicados = [...setSinDuplicados];
    console.log(arraySinDuplicados); // [1, 2, 3, 4, 5]

2. Almacenar valores unicos
    let idUsuarios = new Set();
    idUsuarios.add(101);
    idUsuarios.add(102);
    idUsuarios.add(101); // No se añade porque ya existe
    console.log(idUsuarios); // Set { 101, 102 }

3. Operaciones de conjuntos
    let setA = new Set([1, 2, 3]);
    let setB = new Set([3, 4, 5]);

    // Unión
    let union = new Set([...setA, ...setB]);
    console.log(union); // Set { 1, 2, 3, 4, 5 }

    // Intersección
    let interseccion = new Set([...setA].filter(x => setB.has(x)));
    console.log(interseccion); // Set { 3 }

    // Diferencia
    let diferencia = new Set([...setA].filter(x => !setB.has(x)));
    console.log(diferencia); // Set { 1, 2 }


Usar: Para colecciones de valores únicos, eliminar duplicados y operaciones de conjunto.
Evitar: Donde los valores duplicados son necesarios.