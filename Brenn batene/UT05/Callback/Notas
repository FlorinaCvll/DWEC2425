Una función callback es una función que se pasa como argumento a otra función. La función receptora puede invocar la callback en algún punto de su ejecución.
Los callbacks son especialmente útiles para manejar operaciones asíncronas como solicitudes HTTP, temporizadores y eventos del DOM.

// Cuando usar callbacks
1. Operaciones asíncronas
    • Uso: Cuando necesites manejar operaciones asíncronas como solicitudes de red, temporizadores y lectura de archivos.
    • Ejemplo: Realizar una solicitud HTTP y procesar la respuesta cuando se complete
2. Modularidad
    • Uso: Para dividir el código en módulos más pequeños y reutilizables.
    • Ejemplo: Pasar diferentes funciones de procesamiento a un método de array como map o filter.
3. Eventos
    • Uso: Para manejar eventos del DOM como clics, desplazamientos y teclas presionadas.
    • Ejemplo: Asignar una función callback a un evento de clic en un botón.

// Cuando evitar callbacks
1. Callback hell
    • Situación: Cuando las callbacks están anidadas profundamente, haciendo que el código sea difícil de leer y mantener.
    • Alternativa: Usar Promesas o async/await para manejar la asincronía de manera más legible.
2. Legibilidad
    • Situación: Cuando el uso de callbacks hace que el flujo de control del programa sea difícil de seguir.
    • Alternativa: Refactorizar el código para utilizar funciones con nombre, Promesas o async/await.